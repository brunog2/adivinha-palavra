{"ast":null,"code":"var _jsxFileName = \"/home/bruno/Documentos/adivinha-palavra/src/App.js\";\nimport React from 'react';\nimport 'typeface-roboto';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      palavras: [\"Árvore\", \"Carro\", \"Casa\", \"Natal\", \"Computador\"],\n      alfabeto: 'abcdefghijklmnopqrstuvwxyz',\n      palavraAleatoria: \"\",\n      letrasAleatorias: \"\",\n      chute: \"\"\n    };\n    this.revelarLetra = this.revelarLetra.bind(this);\n  }\n\n  componentDidMount() {\n    var palavraAleatoria = this.state.palavras[Math.floor(Math.random() * this.state.palavras.length)].toUpperCase();\n    var palavraAleatoriaEmbaralhada = palavraAleatoria;\n    var palavraAleatoriaEmbaralhadaSemRepeticao = \"\";\n    var alfabeto = this.state.alfabeto.split('').sort(function () {\n      return 0.5 - Math.random();\n    }).join('').toUpperCase();\n    console.log(alfabeto);\n\n    for (var letra in palavraAleatoriaEmbaralhada) {\n      if (alfabeto.includes(palavraAleatoriaEmbaralhada[letra])) {\n        alfabeto = alfabeto.replace(palavraAleatoriaEmbaralhada[letra], \"\");\n      }\n    }\n\n    for (var character in palavraAleatoria) {\n      console.log(palavraAleatoria[character], palavraAleatoriaEmbaralhadaSemRepeticao);\n      this.setState({\n        chute: this.state.chute + character.toString()\n      });\n\n      if (!palavraAleatoriaEmbaralhadaSemRepeticao.includes(palavraAleatoria[character])) {\n        palavraAleatoriaEmbaralhadaSemRepeticao += palavraAleatoria[character];\n      }\n    }\n\n    console.log(alfabeto);\n    var letrasAleatorias = (palavraAleatoriaEmbaralhadaSemRepeticao.split('').sort(function () {\n      return 0.5 - Math.random();\n    }).join('') + alfabeto.substring(0, 24 - palavraAleatoriaEmbaralhadaSemRepeticao.length).split('').sort(function () {\n      return 0.5 - Math.random();\n    }).join('')).split('').sort(function () {\n      return 0.5 - Math.random();\n    }).join('');\n    console.log(alfabeto, letrasAleatorias);\n    this.setState({\n      palavraAleatoria: palavraAleatoria\n    });\n    this.setState({\n      alfabeto: alfabeto\n    });\n    this.setState({\n      letrasAleatorias: letrasAleatorias\n    });\n  }\n\n  /*\n    Percorrer os nomes, começando com id = 0 e ir comparando com o caractere pra ver se contém na palavra.\n    Mostrar a letra em todos os index com id correspondente que o caractere for igual ao selecionado.\n  */\n  revelarLetra(char) {\n    var letra = char.caractere.toUpperCase();\n    console.log(letra);\n\n    if (this.state.tentativas === 0) {\n      alert(\"Você perdeu\");\n      window.location.reload();\n    } else if (this.state.palavraAleatoria == this.state.chute) {\n      alert(\"Parabpens! Você ganhou!\");\n      window.location.reload();\n    } else if (this.state.palavraAleatoria.includes(letra)) {\n      for (var x = 0; x < this.state.palavraAleatoria.length; x++) {\n        var letraDaPalavraSecreta = this.state.palavraAleatoria[x].toUpperCase();\n        console.log(letraDaPalavraSecreta, letra);\n\n        if (letra === letraDaPalavraSecreta) {\n          document.getElementById(x).value = letra.toUpperCase();\n          this.setState({\n            chute: this.state.chute.replace(x.toString(), letra.toUpperCase())\n          });\n        }\n\n        ;\n      }\n\n      ;\n    } else {\n      alert(`Letra incorreta, te restam ${this.state.tentativas} tentativas`);\n      this.setState({\n        tentativas: this.state.tentativas - 1\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Box, {\n      className: \"titulo\",\n      fontSize: 32,\n      m: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Adivinhe a palavra\")), React.createElement(\"div\", {\n      className: \"container-caracteres\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.palavraAleatoria.split('').map((caractere, index) => React.createElement(TextField, {\n      inputProps: {\n        min: 0,\n        style: {\n          textAlign: 'center',\n          color: 'rgb(64, 82, 178)'\n        }\n      },\n      className: \"caractere\",\n      id: index.toString(),\n      key: index,\n      label: \"\",\n      defaultValue: \"\",\n      InputProps: {\n        readOnly: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))), React.createElement(\"p\", {\n      className: \"palavra\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.state.palavraAleatoria), React.createElement(\"div\", {\n      className: \"container-bt-letras\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, this.state.letrasAleatorias.split('').map((caractere, index) => React.createElement(Button, {\n      variant: \"contained\",\n      id: index,\n      key: index,\n      color: \"primary\",\n      className: \"bt-letras\",\n      name: caractere,\n      style: {\n        maxWidth: '35px',\n        maxHeight: '35px',\n        minWidth: '35px',\n        minHeight: '35px'\n      },\n      onClick: () => this.revelarLetra({\n        caractere\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, caractere))), React.createElement(\"div\", {\n      className: \"container-bt-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      inputProps: {\n        min: 0,\n        style: {\n          textAlign: 'center'\n        }\n      },\n      id: \"letra-digitada\",\n      label: \"Digite a letra\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"container-bt-txt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: \"revelar\",\n      onClick: this.revelarLetra,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Revelar letra\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/bruno/Documentos/adivinha-palavra/src/App.js"],"names":["React","TextField","Typography","Button","Box","App","Component","constructor","props","state","palavras","alfabeto","palavraAleatoria","letrasAleatorias","chute","revelarLetra","bind","componentDidMount","Math","floor","random","length","toUpperCase","palavraAleatoriaEmbaralhada","palavraAleatoriaEmbaralhadaSemRepeticao","split","sort","join","console","log","letra","includes","replace","character","setState","toString","substring","char","caractere","tentativas","alert","window","location","reload","x","letraDaPalavraSecreta","document","getElementById","value","render","map","index","min","style","textAlign","color","readOnly","maxWidth","maxHeight","minWidth","minHeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'typeface-roboto';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      palavras: [\n        \"Árvore\",\n        \"Carro\",\n        \"Casa\",\n        \"Natal\",\n        \"Computador\"\n      ],\n      alfabeto: 'abcdefghijklmnopqrstuvwxyz',\n      palavraAleatoria: \"\",\n      letrasAleatorias: \"\",\n      chute: \"\",\n    };\n    this.revelarLetra = this.revelarLetra.bind(this);\n  };\n\n  componentDidMount() {\n    var palavraAleatoria = this.state.palavras[Math.floor(Math.random() * this.state.palavras.length)].toUpperCase();\n    var palavraAleatoriaEmbaralhada = palavraAleatoria;\n    var palavraAleatoriaEmbaralhadaSemRepeticao = \"\"; \n    var alfabeto =  this.state.alfabeto.split('').sort(function(){return 0.5-Math.random()}).join('').toUpperCase();  \n\n    console.log(alfabeto)\n    for (var letra in palavraAleatoriaEmbaralhada){    \n      if (alfabeto.includes(palavraAleatoriaEmbaralhada[letra])){        \n        alfabeto = alfabeto.replace(palavraAleatoriaEmbaralhada[letra], \"\");        \n      }\n    }\n\n    for (var character in palavraAleatoria){\n      console.log(palavraAleatoria[character], palavraAleatoriaEmbaralhadaSemRepeticao);\n      this.setState({chute: this.state.chute+character.toString()})\n      if (!palavraAleatoriaEmbaralhadaSemRepeticao.includes(palavraAleatoria[character])){\n        palavraAleatoriaEmbaralhadaSemRepeticao += palavraAleatoria[character];\n      }\n    }    \n\n    console.log(alfabeto)\n    var letrasAleatorias = (palavraAleatoriaEmbaralhadaSemRepeticao.split('').sort(function(){return 0.5-Math.random()}).join('') + alfabeto.substring(0,24-palavraAleatoriaEmbaralhadaSemRepeticao.length).split('').sort(function(){return 0.5-Math.random()}).join('')).split('').sort(function(){return 0.5-Math.random()}).join('');\n    console.log(alfabeto, letrasAleatorias);\n\n    this.setState({ palavraAleatoria: palavraAleatoria});\n    this.setState({ alfabeto: alfabeto});\n    this.setState({ letrasAleatorias: letrasAleatorias});\n    \n  };\n\n  /*\n    Percorrer os nomes, começando com id = 0 e ir comparando com o caractere pra ver se contém na palavra.\n    Mostrar a letra em todos os index com id correspondente que o caractere for igual ao selecionado.\n  */\n  revelarLetra(char) {\n    \n    var letra = char.caractere.toUpperCase();\n    console.log(letra)\n    if (this.state.tentativas === 0){\n      alert(\"Você perdeu\");\n      window.location.reload();\n    }\n    else if (this.state.palavraAleatoria == this.state.chute){\n      alert(\"Parabpens! Você ganhou!\");\n      window.location.reload();\n    }\n    else if(this.state.palavraAleatoria.includes(letra)){\n      for (var x = 0; x < this.state.palavraAleatoria.length; x++) {\n        var letraDaPalavraSecreta = this.state.palavraAleatoria[x].toUpperCase();\n        console.log(letraDaPalavraSecreta, letra)\n        if (letra === letraDaPalavraSecreta) {\n          document.getElementById(x).value = letra.toUpperCase();        \n          this.setState({chute: this.state.chute.replace(x.toString(), letra.toUpperCase())});\n        };\n      };\n    } else{\n      alert(`Letra incorreta, te restam ${this.state.tentativas} tentativas`);\n      this.setState({tentativas: this.state.tentativas - 1})\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Typography component=\"div\">\n          <Box className=\"titulo\" fontSize={32} m={1}>Adivinhe a palavra</Box>\n        </Typography>\n\n        <div className=\"container-caracteres\">\n          {this.state.palavraAleatoria.split('').map((caractere, index) => (\n            <TextField\n              inputProps={{ min: 0, style: { textAlign: 'center', color: 'rgb(64, 82, 178)' }}}\n              className=\"caractere\"\n              id={index.toString()}\n              key={index}\n              label=\"\"\n              defaultValue=\"\"\n              InputProps={{\n                readOnly: true,\n              }}\n            />\n          ))}\n        </div>\n\n        <p className=\"palavra\">{this.state.palavraAleatoria}</p>\n\n        <div className=\"container-bt-letras\">\n        {this.state.letrasAleatorias.split('').map((caractere, index) => (\n            <Button \n             variant=\"contained\"\n             id={index}\n             key={index}\n             color=\"primary\"\n             className=\"bt-letras\"\n             name={caractere}\n             style={{maxWidth: '35px', maxHeight: '35px', minWidth: '35px', minHeight: '35px'}}\n             onClick={() => this.revelarLetra({caractere})}\n             >{caractere}</Button>\n          ))}\n        </div>\n\n        <div className=\"container-bt-txt\">\n          <TextField inputProps={{ min: 0, style: { textAlign: 'center' } }} id=\"letra-digitada\" label=\"Digite a letra\"></TextField>\n        </div>\n\n        <div className=\"container-bt-txt\">\n          <Button variant=\"contained\" color=\"primary\" className=\"revelar\" onClick={this.revelarLetra}>Revelar letra</Button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}